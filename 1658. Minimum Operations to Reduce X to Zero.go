package main

import (
	"fmt"
	"strconv"
)

var cache map[string]int
var x_val int

func min(x, y int) int {
	if x < y {
		return x
	}
	return y
}

func minOfResults(r1, r2 int) int {
	if r1 == -1 && r2 == -1 {
		return -1
	} else if r1 == -1 {
		return r2
	} else if r2 == -1 {
		return r1
	} else {
		return min(r1, r2)
	}
}

func didFindInCache(key string) bool {
	_, didFind := cache[key]
	return didFind
}

func createKeyFromValues(i, j, x int) string {
	return strconv.Itoa(i) + "*" + strconv.Itoa(j) + "*" + strconv.Itoa(x)
}

func recursiveOperations(nums []int, xLeft, i, j, operationCount int) int {

	if didFindInCache(createKeyFromValues(i, j, x_val)) {
		return cache[createKeyFromValues(i, j, x_val)]
	} else if xLeft == 0 {
		return operationCount
	} else if xLeft < 0 {
		return -1
	}

	operationCount++

	if i <= j {
		res := minOfResults(recursiveOperations(nums, xLeft-nums[i], i+1, j, operationCount), recursiveOperations(nums, xLeft-nums[j], i, j-1, operationCount))
		cache[createKeyFromValues(i, j, x_val)] = res
		return res
	}

	return -1
}

func minOperations(nums []int, x int) int {
	cache = map[string]int{}
	x_val = x
	return recursiveOperations(nums, x, 0, len(nums)-1, 0)
}

func main() {

	input := []int{}
	x := 510247308

	answer := minOperations(input, x)
	fmt.Println(answer)

}
